private static Row convertRow(Row row, StructType originalSchema, StructType updatedSchema, int precision, int scale) {
    Object[] updatedValues = new Object[originalSchema.fields().length];

    for (int i = 0; i < originalSchema.fields().length; i++) {
        StructField originalField = originalSchema.fields()[i];
        StructField updatedField = updatedSchema.fields()[i];
        Object value = row.get(i);

        if (originalField.dataType() instanceof DoubleType && value instanceof Double) {
            // Convert Double to BigDecimal
            BigDecimal bigDecimalValue = BigDecimal.valueOf((Double) value).setScale(scale, BigDecimal.ROUND_HALF_UP);

            // Apply currency-based logic for specific fields
            if (AmountFields.matches(originalField.name())) {
                String currencyCode = getCurrencyCode(row);
                int currencyDecimalPlaces = getCurrencyDecimalPlaces(currencyCode);
                bigDecimalValue = bigDecimalValue.divide(BigDecimal.valueOf(Math.pow(10, currencyDecimalPlaces)), BigDecimal.ROUND_HALF_UP);
            }

            updatedValues[i] = bigDecimalValue;
        } else if (originalField.dataType() instanceof StructType) {
            // Handle nested Row structures
            updatedValues[i] = convertRow((Row) value, (StructType) originalField.dataType(), (StructType) updatedField.dataType(), precision, scale);
        } else if (originalField.dataType() instanceof ArrayType) {
            // Handle ArrayType: Convert WrappedArray to Java List
            ArrayType arrayType = (ArrayType) originalField.dataType();
            if (arrayType.elementType() instanceof DoubleType) {
                // Convert Scala WrappedArray to a Java List
                List<Double> arrayList = new ArrayList<>();
                for (Object element : (Object[]) value) {
                    if (element != null) {
                        arrayList.add((Double) element);
                    }
                }
                
                List<BigDecimal> convertedList = new ArrayList<>();
                for (Double element : arrayList) {
                    BigDecimal bigDecimalElement = BigDecimal.valueOf(element).setScale(scale, BigDecimal.ROUND_HALF_UP);
                    convertedList.add(bigDecimalElement);
                }
                updatedValues[i] = convertedList;
            } else if (arrayType.elementType() instanceof StructType) {
                // Convert list of Rows to a list of converted Rows
                List<Row> arrayList = new ArrayList<>();
                for (Object element : (Object[]) value) {
                    if (element != null) {
                        arrayList.add(convertRow((Row) element, (StructType) arrayType.elementType(), (StructType) ((ArrayType) updatedField.dataType()).elementType(), precision, scale));
                    }
                }
                updatedValues[i] = arrayList;
            } else {
                // Keep other ArrayType elements unchanged
                updatedValues[i] = value;
            }
        } else {
            // Keep other values unchanged
            updatedValues[i] = value;
        }
    }

    return RowFactory.create(updatedValues);
}
