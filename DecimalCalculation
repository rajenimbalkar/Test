import org.apache.spark.sql.Dataset;
import org.apache.spark.sql.Row;
import org.apache.spark.sql.functions;
import org.apache.spark.sql.types.DataTypes;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Currency;
import java.util.EnumSet;
import java.util.List;

public class DistributedDatasetProcessor {

    public static Dataset<Row> processAmountsDistributed(Dataset<Row> dataset) {
        // Get the list of amount fields from the enum
        List<String> amountFields = getAmountFields();

        // Define UDF to calculate updated amount based on currency code
        org.apache.spark.sql.expressions.UserDefinedFunction updateAmountUDF = functions.udf(
            (String currencyCode, BigDecimal amount) -> {
                if (currencyCode == null || amount == null) {
                    return amount; // Return as-is if currency or amount is missing
                }
                int decimalPlaces = getDecimalPlaces(currencyCode);
                return amount.setScale(decimalPlaces, BigDecimal.ROUND_HALF_UP);
            },
            DataTypes.createDecimalType(38, 10) // Adjust precision and scale as needed
        );

        // Apply UDF to each field in the dataset
        for (String field : amountFields) {
            // Check if the field exists in the dataset schema
            if (Arrays.asList(dataset.schema().fieldNames()).contains(field)) {
                dataset = dataset.withColumn(
                    field, updateAmountUDF.apply(functions.col("currencyCode"), functions.col(field))
                );
            }
        }

        return dataset;
    }

    private static int getDecimalPlaces(String currencyCode) {
        try {
            Currency currency = Currency.getInstance(currencyCode);
            return currency.getDefaultFractionDigits();
        } catch (IllegalArgumentException e) {
            // Default to 2 decimal places if currency code is invalid
            return 2;
        }
    }

    private static List<String> getAmountFields() {
        // Get field names from the AmountFields enum
        return EnumSet.allOf(AmountFields.class).stream()
            .map(Enum::name)
            .toList();
    }
}
