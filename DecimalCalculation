import org.apache.spark.sql.Row;
import org.apache.spark.sql.functions;
import scala.collection.JavaConverters;

import java.math.BigDecimal;
import java.util.List;
import java.util.Map;

public class DatasetConverter {

    // Main recursive function to convert fields
    private static Row convertFields(Row row, String currencyCode) {
        // Convert field names (String[]) to List<String> or Seq<String> for compatibility
        String[] fieldNames = row.schema().fieldNames();

        // Iterate over each field
        for (String fieldName : fieldNames) {
            // Get the value of the current field dynamically
            Object value = row.getAs(fieldName);

            // If the value is of type Double, convert to BigDecimal
            if (value instanceof Double) {
                BigDecimal bigDecimalValue = CurrencyUtils.convertToBigDecimal((Double) value);

                // Apply currency logic if the field matches the condition
                if (AmountFields.contains(fieldName) || (fieldName.startsWith("F_") && AmountFields.contains(fieldName.substring(2)))) {
                    bigDecimalValue = CurrencyUtils.convertToBigDecimalWithCurrencyLogic((Double) value, currencyCode);
                }

                // Update the field value in the row
                row = row.withColumn(fieldName, functions.lit(bigDecimalValue));
            } else if (value instanceof Row) {
                // If the value is a nested Row, recurse into it
                row = row.withColumn(fieldName, functions.lit(convertFields((Row) value, currencyCode)));
            } else if (value instanceof List) {
                // If the value is an array (List of Rows), process each row in the list
                List<Row> rows = (List<Row>) value;
                for (int i = 0; i < rows.size(); i++) {
                    rows.set(i, convertFields(rows.get(i), currencyCode));
                }
                row = row.withColumn(fieldName, functions.lit(rows));
            }
        }
        return row;
    }
}
