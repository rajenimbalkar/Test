import org.apache.spark.sql.Dataset;
import org.apache.spark.sql.Row;
import org.apache.spark.sql.Encoders;
import org.apache.spark.sql.types.*;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Currency;
import java.util.List;

public class DatasetConverter {

    /**
     * Converts all `Long` datatype fields in a dataset where each row is an array type into `BigDecimal`
     * and applies currency-based formatting for matched fields.
     *
     * @param dataset   The input dataset.
     * @param precision The precision of the `BigDecimal`.
     * @param scale     The scale of the `BigDecimal`.
     * @return Updated dataset with `Long` fields converted to `BigDecimal` and formatted per currency.
     */
    public static Dataset<Row> convertArrayRowsWithCurrencyLogic(Dataset<Row> dataset, int precision, int scale) {
        return dataset.map(row -> {
            List<Object> updatedRowArray = new ArrayList<>();

            // Extract the currency code from the header
            Row header = (Row) row.getAs("header"); // Adjust field name as necessary
            String currencyCode = header != null ? header.getAs("currencyCode") : "USD"; // Default to USD if missing

            // Process each element of the row array
            for (int i = 0; i < row.size(); i++) {
                Object element = row.get(i);

                if (element instanceof Row) {
                    // If the element is a Row (e.g., header or trailer), process it recursively
                    StructType elementSchema = (StructType) ((Row) element).schema();
                    updatedRowArray.add(convertRow((Row) element, elementSchema, precision, scale, currencyCode));
                } else if (element instanceof List) {
                    // If the element is a list (e.g., array of data rows), process each Row in the list
                    List<Row> dataArray = (List<Row>) element;
                    List<Row> updatedDataArray = new ArrayList<>();
                    for (Row dataRow : dataArray) {
                        StructType dataSchema = (StructType) dataRow.schema();
                        updatedDataArray.add(convertRow(dataRow, dataSchema, precision, scale, currencyC
