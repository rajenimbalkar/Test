import org.apache.spark.sql.*;
import org.apache.spark.sql.functions.*;
import org.apache.spark.sql.types.*;

import java.util.*;

public class FilterWithSpecificFields {
    public static void main(String[] args) {
        SparkSession spark = SparkSession.builder()
                .appName("FilterWithSpecificFields")
                .master("local[*]")
                .getOrCreate();

        // Define schema for the data array
        StructType dataSchema = new StructType()
                .add("accountNumber", DataTypes.StringType, false)
                .add("referenceNumber", DataTypes.StringType, false)
                .add("otherField", DataTypes.StringType, false); // Example of additional fields

        // Sample dataset
        List<Row> rows = Arrays.asList(
                RowFactory.create("header1", "trailer1", Arrays.asList(
                        RowFactory.create("123", "abc", "other1"),
                        RowFactory.create("456", "def", "other2")
                )),
                RowFactory.create("header2", "trailer2", Arrays.asList(
                        RowFactory.create("789", "xyz", "other3"),
                        RowFactory.create("456", "def", "other2")
                ))
        );

        StructType schema = new StructType()
                .add("header", DataTypes.StringType, false)
                .add("trailer", DataTypes.StringType, false)
                .add("data", DataTypes.createArrayType(dataSchema));

        Dataset<Row> dataset = spark.createDataFrame(rows, schema);

        // Define the filter list with accountNumber and referenceNumber
        List<Map<String, Object>> filterList = Arrays.asList(
                Map.of("accountNumber", "123", "referenceNumber", "abc"),
                Map.of("accountNumber", "456", "referenceNumber", "def")
        );

        // Convert the filter list to a Dataset
        List<Row> filterRows = new ArrayList<>();
        for (Map<String, Object> filter : filterList) {
            filterRows.add(RowFactory.create(filter.get("accountNumber"), filter.get("referenceNumber")));
        }

        // Define schema for the filter dataset
        StructType filterSchema = new StructType()
                .add("accountNumber", DataTypes.StringType, false)
                .add("referenceNumber", DataTypes.StringType, false);

        Dataset<Row> filterDataset = spark.createDataFrame(filterRows, filterSchema);

        // Explode the "data" field to perform a join with the filter dataset
        Dataset<Row> explodedDataset = dataset.withColumn("data", explode(col("data")));

        // Perform a join to filter the data
        Dataset<Row> filteredDataset = explodedDataset.join(filterDataset,
                explodedDataset.col("data.accountNumber").equalTo(filterDataset.col("accountNumber"))
                        .and(explodedDataset.col("data.referenceNumber").equalTo(filterDataset.col("referenceNumber"))), "left_anti");

        // Group back the data by header and trailer
        Dataset<Row> resultDataset = filteredDataset.groupBy("header", "trailer")
                .agg(collect_list("data").alias("data"));

        // Show the result
        resultDataset.show(false);

        spark.stop();
    }
}
