To use Java Streams instead of a `for` loop for constructing the SQL parts, you can take advantage of the `Collectors` class. Hereâ€™s how you can do it:

### Step-by-Step Implementation

1. **Update the Enum to Store Column Metadata Using Lists:**
   - The enum will store table names and their corresponding columns in a map.

2. **Use Java Streams to Construct the SQL Parts:**
   - Streams can be used to build the `MERGE` SQL statement dynamically.

### Example Enum and Method Implementation

#### Define the Enum

```java
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public enum TableMetadata {
    INSTANCE;

    private final Map<String, List<String>> tableColumnsMap;

    TableMetadata() {
        tableColumnsMap = new HashMap<>();
        tableColumnsMap.put("users", List.of("id", "name", "email"));
        tableColumnsMap.put("products", List.of("product_id", "product_name", "price"));
    }

    public List<String> getColumns(String tableName) {
        return tableColumnsMap.get(tableName);
    }

    public boolean hasTable(String tableName) {
        return tableColumnsMap.containsKey(tableName);
    }
}
```

#### Generate Merge SQL Method Using Streams

```java
import java.util.List;
import java.util.stream.Collectors;

public class SqlMergeGenerator {

    public static String generateMergeSql(String tableName) {
        if (!TableMetadata.INSTANCE.hasTable(tableName)) {
            throw new IllegalArgumentException("Table name not found in metadata: " + tableName);
        }

        List<String> columns = TableMetadata.INSTANCE.getColumns(tableName);

        String columnNames = columns.stream()
                                    .collect(Collectors.joining(", "));

        String valuePlaceholders = columns.stream()
                                          .map(col -> "?")
                                          .collect(Collectors.joining(", ", "(", ")"));

        String updateSetClause = columns.stream()
                                        .map(col -> col + " = source." + col)
                                        .collect(Collectors.joining(", "));

        String conditionClause = columns.stream()
                                        .map(col -> "target." + col + " = source." + col)
                                        .collect(Collectors.joining(" AND "));

        return "MERGE INTO " + tableName + " AS target " +
               "USING (VALUES " + valuePlaceholders + ") AS source (" + columnNames + ") " +
               "ON " + conditionClause + " " +
               "WHEN MATCHED THEN " +
               "UPDATE SET " + updateSetClause + " " +
               "WHEN NOT MATCHED THEN " +
               "INSERT (" + columnNames + ") " +
               "VALUES " + valuePlaceholders;
    }

    public static void main(String[] args) {
        String mergeSql = generateMergeSql("users");
        System.out.println(mergeSql);

        mergeSql = generateMergeSql("products");
        System.out.println(mergeSql);
    }
}
```

### Explanation

1. **Enum `TableMetadata`:**
   - Stores metadata for tables in a map where the key is the table name and the value is a list of column names.
   - Provides methods `getColumns` to retrieve columns for a given table name and `hasTable` to check if a table exists.

2. **Method `generateMergeSql`:**
   - Retrieves the column information from the `TableMetadata` enum based on the provided table name.
   - Constructs a SQL `MERGE` statement dynamically using Java Streams:
     - **Column Names:** Joins column names with a comma for the insert and update parts of the merge.
     - **Value Placeholders:** Creates placeholders (`?`) for the values to be inserted.
     - **Update Set Clause:** Constructs the `UPDATE SET` clause.
     - **Condition Clause:** Constructs the `ON` condition for matching records using the same columns as the target values.

3. **Main Method:**
   - Demonstrates generating the `MERGE` SQL for the `users` and `products` tables defined in the `TableMetadata` enum.

### Running the Code

When you run the `main` method, it will print the dynamically generated `MERGE` SQL statements for the `users` and `products` tables:

```sql
MERGE INTO users AS target 
USING (VALUES (?, ?, ?)) AS source (id, name, email) 
ON target.id = source.id AND target.name = source.name AND target.email = source.email 
WHEN MATCHED THEN 
UPDATE SET id = source.id, name = source.name, email = source.email 
WHEN NOT MATCHED THEN 
INSERT (id, name, email) 
VALUES (?, ?, ?)

MERGE INTO products AS target 
USING (VALUES (?, ?, ?)) AS source (product_id, product_name, price) 
ON target.product_id = source.product_id AND target.product_name = source.product_name AND target.price = source.price 
WHEN MATCHED THEN 
UPDATE SET product_id = source.product_id, product_name = source.product_name, price = source.price 
WHEN NOT MATCHED THEN 
INSERT (product_id, product_name, price) 
VALUES (?, ?, ?)
```

This implementation ensures that you can dynamically generate `MERGE` SQL statements based on table names and their corresponding columns using Java Streams, making the code concise and more readable.
