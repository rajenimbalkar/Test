package com.example;

import org.apache.spark.sql.Dataset;
import org.apache.spark.sql.Row;
import org.apache.spark.sql.SparkSession;
import org.apache.spark.sql.catalyst.encoders.RowEncoder;
import org.apache.spark.sql.types.StructType;
import org.apache.spark.sql.RowFactory;
import org.apache.spark.sql.DataFrameReader;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
class IngesterTest {

    @Mock
    private SparkSession sparkSession;

    @Mock
    private DataFrameReader dataFrameReader;

    @Mock
    private Dataset<Row> dataset;

    @InjectMocks
    private Ingester ingester;

    @BeforeEach
    void setUp() {
        when(sparkSession.read()).thenReturn(dataFrameReader);
        when(dataFrameReader.option("header", "true")).thenReturn(dataFrameReader);
        when(dataFrameReader.csv(anyString())).thenReturn(dataset);
    }

    @Test
    void testReadFile() {
        // Given
        String filePath = "src/test/resources/sample.csv";
        List<Row> expectedRows = Arrays.asList(
                RowFactory.create("Alice", 30),
                RowFactory.create("Bob", 25),
                RowFactory.create("Charlie", 35)
        );
        StructType schema = new StructType()
                .add("name", "string")
                .add("age", "integer");

        when(dataset.schema()).thenReturn(schema);
        when(dataset.collectAsList()).thenReturn(expectedRows);

        // When
        Dataset<Row> resultDataset = ingester.readFile(filePath);
        List<Row> result = resultDataset.collectAsList();

        // Then
        assertEquals(3, result.size());
        assertEquals("Alice", result.get(0).getAs("name"));
        assertEquals(30, result.get(0).getAs("age"));
        assertEquals("Bob", result.get(1).getAs("name"));
        assertEquals(25, result.get(1).getAs("age"));
        assertEquals("Charlie", result.get(2).getAs("name"));
        assertEquals(35, result.get(2).getAs("age"));
    }
}
