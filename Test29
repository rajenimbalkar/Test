import org.apache.spark.sql.Row;
import org.apache.spark.sql.RowFactory;
import org.apache.spark.sql.types.*;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class DataSectionCombiner {

    public static StructType createUnifiedSchema(Map<String, StructType> sectionSchemas) {
        List<StructField> fields = new ArrayList<>();
        for (StructType schema : sectionSchemas.values()) {
            fields.addAll(Arrays.asList(schema.fields()));
        }
        return DataTypes.createStructType(fields);
    }

    public static List<Row> combineSections(Map<String, List<Row>> sectionMap, Map<String, StructType> sectionSchemas) {
        List<Row> combinedRows = new ArrayList<>();

        int maxSize = sectionMap.values().stream().mapToInt(List::size).max().orElse(0);

        for (int i = 0; i < maxSize; i++) {
            List<Object> combinedValues = new ArrayList<>();

            for (Map.Entry<String, List<Row>> entry : sectionMap.entrySet()) {
                String sectionKey = entry.getKey();
                List<Row> rows = entry.getValue();
                StructType schema = sectionSchemas.get(sectionKey);

                Row row = (i < rows.size()) ? rows.get(i) : createEmptyRow(schema);

                for (StructField field : schema.fields()) {
                    combinedValues.add(row.get(row.fieldIndex(field.name())));
                }
            }
            combinedRows.add(RowFactory.create(combinedValues.toArray()));
        }
        return combinedRows;
    }

    public static Row createEmptyRow(StructType schema) {
        List<Object> emptyValues = Arrays.stream(schema.fields())
                .map(field -> null)
                .collect(Collectors.toList());
        return RowFactory.create(emptyValues.toArray());
    }
}
public static List<Row> combineSections(Map<String, List<Row>> sectionMap, Map<String, StructType> sectionSchemas) {
    List<Row> combinedRows = new ArrayList<>();

    int maxSize = sectionMap.values().stream().mapToInt(List::size).max().orElse(0);

    for (int i = 0; i < maxSize; i++) {
        List<Object> combinedValues = new ArrayList<>();

        for (Map.Entry<String, List<Row>> entry : sectionMap.entrySet()) {
            String sectionKey = entry.getKey();
            List<Row> rows = entry.getValue();
            StructType schema = sectionSchemas.get(sectionKey);

            Row row = (i < rows.size()) ? rows.get(i) : createEmptyRow(schema);

            for (StructField field : schema.fields()) {
                combinedValues.add(row.get(row.fieldIndex(field.name())));
            }
        }
        combinedRows.add(RowFactory.create(combinedValues.toArray()));
    }
    return combinedRows;
}
public static StructType createUnifiedSchema(Map<String, StructType> sectionSchemas) {
    List<StructField> fields = new ArrayList<>();
    for (Map.Entry<String, StructType> entry : sectionSchemas.entrySet()) {
        String sectionKey = entry.getKey();
        StructType schema = entry.getValue();
        for (StructField field : schema.fields()) {
            // Append section identifier as prefix to field name to ensure uniqueness
            String fieldName = sectionKey + "_" + field.name();
            fields.add(new StructField(fieldName, field.dataType(), field.nullable(), field.metadata()));
        }
    }
    return DataTypes.createStructType(fields);
}
